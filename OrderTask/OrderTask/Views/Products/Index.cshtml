@model MvcPageList<Product>

@{
    ViewData["Title"] = "Products";
}
<h2>Products</h2>
<div class="container p-4">


    <div class="row">
        <div class="col-md-6">
            <form class="d-flex" asp-action="Index" asp-controller="Products">
                <input name="searchString" class="form-control me-1" type="search" placeholder="Search products" aria-label="Search products" />
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
        </div>
        <div class="col-md-6">
            <a asp-action="index" class="btn btn-outline-success">back to Full list</a>
        </div>
    </div>

    <p>
        <a asp-action="Create" class="btn btn-success">Create New Product</a>
    </p>


    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Items)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                    <td>

                        <a asp-action="Edit" asp-route-id="@product.Id" class="btn btn-outline-warning">Edit</a>

                    </td>
                    <td>

                        <a asp-action="Delete" asp-route-id="@product.Id" class="btn btn-outline-danger">Delete</a>

                    </td>

                    <td></td>

                </tr>
            }
        </tbody>
    </table>

    @{
        // Calculate the start and end page numbers for pagination
        int startPage = Model.PageIndex - 2;
        int endPage = Model.PageIndex + 2;

        if (startPage < 1)
        {
            endPage += (1 - startPage);
            startPage = 1;
        }
        if (endPage > Model.TotalPages)
        {
            startPage -= (endPage - Model.TotalPages);
            endPage = Model.TotalPages;
        }
        if (startPage < 1) startPage = 1;
    }
    <div class="row justify-content-center">
        
        <div>
            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.PageIndex == 1 ? "disabled" : "" )">
                        <a class="page-link text-black" asp-route-pageNumber="1">
                            <span>First</span>
                        </a>
                    </li>
                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link text-black" asp-route-pageNumber="@(Model.PageIndex - 1)">
                            <span>Previous</span>
                        </a>
                    </li>
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                            <a class="page-link text-black" asp-route-pageNumber="@i">
                                <span>@i</span>
                            </a>
                        </li>
                    }
                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                        <a class="page-link text-black" asp-route-pageNumber="@(Model.PageIndex + 1)">
                            <span>Next</span>
                        </a>
                    </li>
                    <li class="page-item @(Model.PageIndex == Model.TotalPages ? "disabled" : "" )">
                        <a class="page-link text-black" asp-route-pageNumber="@Model.TotalPages">
                            <span>Last</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
</div>